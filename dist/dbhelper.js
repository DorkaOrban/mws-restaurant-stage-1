var database_version=11;const port=1337;class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/restaurants/`}static get DATABASE_NAME(){return'restaurant-db'}static get DATABASE_VERSION(){return database_version}static setVersion(a){return this.database_version=a,this.database_version}static fetchRestaurants(a){(async()=>{await fetch(DBHelper.DATABASE_URL).then(d=>{d.ok?d.json().then(f=>{const g=f;idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,h=>{console.log('db old '+h.oldVersion);let j=h.createObjectStore('resKeyval');for(let k in g)j.put(g[k],k)}).catch(()=>{console.log('Failed')}),a(null,g)}):console.log(`Request failed. Returned status of ${d.status} with ${d.statusText}`)}).catch(()=>{DBHelper.setVersion(DBHelper.DATABASE_VERSION),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,f=>{switch(f.oldVersion){case 0:f.createObjectStore('resKeyval');}}).then(f=>{return f.transaction('resKeyval').objectStore('resKeyval').getAll()}).then(f=>a(null,f))})})()}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const f=d.find(g=>g.id==a);f?b(null,f):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const f=d.filter(g=>g.cuisine_type==a);b(null,f)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const f=d.filter(g=>g.neighborhood==a);b(null,f)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,f)=>{if(d)c(d,null);else{let g=f;'all'!=a&&(g=g.filter(h=>h.cuisine_type==a)),'all'!=b&&(g=g.filter(h=>h.neighborhood==b)),c(null,g)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((g,h)=>c[h].neighborhood),f=d.filter((g,h)=>d.indexOf(g)==h);a(null,f)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((g,h)=>c[h].cuisine_type),f=d.filter((g,h)=>d.indexOf(g)==h);a(null,f)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){let b=a.photograph;return'undefined'==typeof b&&(b=a.id),`/img/${b}.jpg`}static mapMarkerForRestaurant(a,b){const c=new L.marker([a.latlng.lat,a.latlng.lng],{title:a.name,alt:a.name,url:DBHelper.urlForRestaurant(a)});return c.addTo(b),c}static postHelper(a){console.log('Posting request to API...');let b=`http://localhost:${port}/reviews/`;fetch(b,{method:'post',body:JSON.stringify(a),cache:'no-cache',credentials:'same-origin',headers:{'content-type':'application/json'},mode:'cors',redirect:'follow',referrer:'no-referrer'}).then(function(c){return c.json()}).then(function(c){return console.log('Created:',c),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,d=>{switch(console.log(d.oldVersion),d.oldVersion){case 0:{let f=d.createObjectStore('reviews');for(let g in c)f.put(c[g],g)}}}).then(d=>{return d.transaction('reviews').objectStore('reviews').getAll()}).then(()=>console.log('Done!')),c})}static fetchReviews(a){const b=`http://localhost:${port}/reviews/`;(async()=>{await fetch(b).then(f=>{f.ok?f.json().then(g=>{const h=g;console.log(h),console.log(DBHelper.DATABASE_VERSION),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,j=>{console.log('db old '+j.oldVersion);let k=j.createObjectStore('reviews');for(let l in h)k.put(h[l],l),console.log(h[l])}).catch(()=>{console.log('Failed')}),a(null,h)}):console.log(`Request failed. Returned status of ${f.status} with ${f.statusText}`)}).catch(f=>{console.log(f+'if error: '+DBHelper.DATABASE_VERSION),DBHelper.setVersion(DBHelper.DATABASE_VERSION),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,g=>{switch(g.oldVersion){case 0:g.createObjectStore('reviews');}}).then(g=>{return g.transaction('reviews').objectStore('reviews').getAll()}).then(g=>a(null,g))})})()}static fetchReviewsById(a,b){DBHelper.fetchReviews((c,d)=>{if(c)b(c,null);else{const f=d.find(g=>g.id==a);f?(console.log('one'+f),b(null,f)):b('Review does not exist',null)}})}static postFavourite(a){let b=a?'true':'false',c=`http://localhost:${port}/reviews/?is_favorite=${b}`;fetch(c,{method:'post',body:JSON.stringify(opts),cache:'no-cache',credentials:'same-origin',headers:{'content-type':'application/json'},mode:'cors',redirect:'follow',referrer:'no-referrer'}).then(function(d){return d.json()}).then(function(d){console.log('Created:',d)}).catch(d=>console.log(d))}}