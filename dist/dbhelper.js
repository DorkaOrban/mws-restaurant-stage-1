var database_version=10;class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/restaurants/`}static get DATABASE_NAME(){return'restaurant-db'}static get DATABASE_VERSION(){return database_version}static setVersion(a){return this.database_version=a,this.database_version}static fetchRestaurants(a){(async()=>{await fetch(DBHelper.DATABASE_URL).then(d=>{d.ok?d.json().then(e=>{const f=e;idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,g=>{console.log('db old '+g.oldVersion);let h=g.createObjectStore('resKeyval');for(let j in f)h.put(f[j],j)}).catch(()=>{console.log('Failed')}),a(null,f)}):console.log(`Request failed. Returned status of ${d.status} with ${d.statusText}`)}).catch(()=>{DBHelper.setVersion(DBHelper.DATABASE_VERSION),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,e=>{switch(e.oldVersion){case 0:e.createObjectStore('resKeyval');}}).then(e=>{return e.transaction('resKeyval').objectStore('resKeyval').getAll()}).then(e=>a(null,e))})})()}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e?b(null,e):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.cuisine_type==a);b(null,e)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const e=d.filter(f=>f.neighborhood==a);b(null,e)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,e)=>{if(d)c(d,null);else{let f=e;'all'!=a&&(f=f.filter(g=>g.cuisine_type==a)),'all'!=b&&(f=f.filter(g=>g.neighborhood==b)),c(null,f)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].neighborhood),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((f,g)=>c[g].cuisine_type),e=d.filter((f,g)=>d.indexOf(f)==g);a(null,e)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){let b=a.photograph;return'undefined'==typeof b&&(b=a.id),`/img/${b}.jpg`}static mapMarkerForRestaurant(a,b){const c=new L.marker([a.latlng.lat,a.latlng.lng],{title:a.name,alt:a.name,url:DBHelper.urlForRestaurant(a)});return c.addTo(b),c}static postHelper(a){console.log('Posting request to API...');let b=`http://localhost:${port}/reviews/`;fetch(b,{method:'post',body:JSON.stringify(a),cache:'no-cache',credentials:'same-origin',headers:{'content-type':'application/json'},mode:'cors',redirect:'follow',referrer:'no-referrer'}).then(function(c){return c.json()}).then(function(c){return console.log('Created:',c),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,d=>{switch(console.log(d.oldVersion),d.oldVersion){case 0:{let e=d.createObjectStore('reviews');for(let f in c)e.put(c[f],f)}}}).then(d=>{return d.transaction('reviews').objectStore('reviews').getAll()}).then(()=>console.log('Done!')),c})}static fetchReviews(a){const b=`http://localhost:${port}/reviews/`;(async()=>{await fetch(b).then(e=>{e.ok?e.json().then(f=>{const g=f;idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,h=>{console.log('db old '+h.oldVersion);let j=h.createObjectStore('reviews');for(let k in g)j.put(g[k],k)}).catch(()=>{console.log('Failed')}),a(null,g)}):console.log(`Request failed. Returned status of ${e.status} with ${e.statusText}`)}).catch(()=>{DBHelper.setVersion(DBHelper.DATABASE_VERSION),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,f=>{switch(f.oldVersion){case 0:f.createObjectStore('reviews');}}).then(f=>{return f.transaction('reviews').objectStore('reviews').getAll()}).then(f=>a(null,f))})})()}static fetchReviewsById(a,b){DBHelper.fetchReviews((c,d)=>{if(c)b(c,null);else{const e=d.find(f=>f.id==a);e?b(null,e):b('Review does not exist',null)}})}}