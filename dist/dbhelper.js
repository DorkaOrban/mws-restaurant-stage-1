var database_version=13;const port=1337;class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/restaurants/`}static get DATABASE_REVIEWS_URL(){return`http://localhost:${1337}/reviews/?restaurant_id=`}static get DATABASE_ALL_REVIEWS(){return`http://localhost:${1337}/reviews/`}static get DATABASE_NAME(){return'restaurant-db'}static get DATABASE_VERSION(){return database_version}static setVersion(a){return this.database_version=a,this.database_version}static dbPromise(){return idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION+1,a=>{switch(a.oldVersion){case a.oldVersion:a.objectStoreNames.contains('resKeyval',{keyPath:'id',autoIncrement:!0})||a.createObjectStore('resKeyval',{keyPath:'id',autoIncrement:!0});case a.oldVersion+1:{const b=a.createObjectStore('reviews',{keyPath:'id',autoIncrement:!0});b.createIndex('restaurant','restaurant_id')}}})}static fetchRestaurants(a){(async()=>{await fetch(DBHelper.DATABASE_URL).then(d=>{d.ok?d.json().then(f=>{const g=f;idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,h=>{let j=h.createObjectStore('resKeyval');for(let k in g)j.put(g[k],k)}).catch(()=>{console.log('Failed')}),a(null,g)}):console.log(`Request failed. Returned status of ${d.status} with ${d.statusText}`)}).catch(()=>{DBHelper.setVersion(DBHelper.DATABASE_VERSION),idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION+1,f=>{switch(f.oldVersion){case 0:f.createObjectStore('resKeyval');}}).then(f=>{return f.transaction('resKeyval').objectStore('resKeyval').getAll()}).then(f=>a(null,f))})})()}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const f=d.find(g=>g.id==a);f?b(null,f):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisine(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const f=d.filter(g=>g.cuisine_type==a);b(null,f)}})}static fetchRestaurantByNeighborhood(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const f=d.filter(g=>g.neighborhood==a);b(null,f)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,f)=>{if(d)c(d,null);else{let g=f;'all'!=a&&(g=g.filter(h=>h.cuisine_type==a)),'all'!=b&&(g=g.filter(h=>h.neighborhood==b)),c(null,g)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((g,h)=>c[h].neighborhood),f=d.filter((g,h)=>d.indexOf(g)==h);a(null,f)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const d=c.map((g,h)=>c[h].cuisine_type),f=d.filter((g,h)=>d.indexOf(g)==h);a(null,f)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){let b=a.photograph;return'undefined'==typeof b?(b=a.id?a.id:10,`/img/${b}.jpg`):`/img/${b}.jpg`}static mapMarkerForRestaurant(a,b){if('undefined'!=typeof a.latlng){const c=new L.marker([a.latlng.lat,a.latlng.lng],{title:a.name,alt:a.name,url:DBHelper.urlForRestaurant(a)});return c.addTo(b),c}}static fetchAndCacheReviews(){return fetch(DBHelper.DATABASE_ALL_REVIEWS).then(a=>a.json()).then(a=>{return this.dbPromise().then(b=>{const c=b.transaction('reviews','readwrite'),d=c.objectStore('reviews');return a.forEach(f=>d.put(f)),c.complete.then(()=>Promise.resolve(a))})}).catch(()=>{idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,()=>{}).then(b=>{return b.transaction('reviews').objectStore('reviews').getAll()}).then(b=>callback(null,b))})}static fetchReviews(a){var b=DBHelper.DATABASE_REVIEWS_URL+a;return fetch(b).then(c=>c.json()).then(c=>c).catch(c=>{return console.log(c),this.getLocalDataByID('reviews','restaurant',a).then(d=>{return Promise.resolve(d)})})}static getLocalDataByID(a,b,c){const d=this.dbPromise();let f=parseInt(c);return d.then(g=>{if(g){const h=this.getObjectStore(g,a,'readonly'),j=h.index(b);return Promise.resolve(j.getAll(f))}})}static getObjectStore(a,b,c){let d=a.transaction(b,c);return d.objectStore(b)}static fetchReviewsById(a,b){DBHelper.fetchReviews((c,d)=>{if(c)b(c,null);else{const f=d.find(g=>g.restaurant_id==a);f?b(null,f):b('Review does not exist',null)}})}static postFavourite(a,b){var c=window.fetch.bind(window);let d=b?'true':'false',f=`http://localhost:${port}/restaurants/${a}/?is_favorite=${b}`;c(f,{method:'PUT',body:JSON.stringify({is_favorite:b}),cache:'no-cache',credentials:'same-origin',headers:{'content-type':'application/json'},mode:'cors',redirect:'follow',referrer:'no-referrer'}).then(function(g){return g.json()}).then(function(g){console.log('Created:',g)}).catch(g=>console.log('postfavourite ',g))}static updateFavouriteStatus(a,b){var c=window.fetch.bind(window);c(`${DBHelper.DATABASE_URL}${a}`,{method:'PUT',body:JSON.stringify({is_favorite:b}),cache:'no-cache',credentials:'same-origin',headers:{'content-type':'application/json'},mode:'cors',redirect:'follow',referrer:'no-referrer'}).then(()=>{console.log('changed'),this.dbPromise().then(d=>{const f=d.transaction('resKeyval','readwrite'),g=f.objectStore('resKeyval');g.get(a).then(h=>{'undefined'!=typeof h&&(h.is_favorite=b,g.put(h))})})})}static addReview(a){let b={name:'addReview',data:a,object_type:'review'};navigator.onLine||'addReview'!==b.name||DBHelper.sendDataWhenOnline(b);let c={name:a.name,rating:a.rating,comments:a.comments,restaurant_id:parseInt(a.restaurant_id)};var d={method:'POST',body:JSON.stringify(c),headers:{'content-type':'application/json'}};return fetch(DBHelper.DATABASE_ALL_REVIEWS,d).then(f=>{const g=f.headers.get('content-type');return g&&-1!==g.indexOf('application/json')?f.json():'API call successfull'}).then(f=>{idb.open(DBHelper.DATABASE_NAME,DBHelper.DATABASE_VERSION,()=>{}).then(g=>{return g.transaction('reviews','readwrite').objectStore('reviews').put(f).complete(),f})}).catch(()=>{})}static sendDataWhenOnline(a){console.log('sendDataWhenOnline'),localStorage.setItem('data',JSON.stringify(a.data)),window.addEventListener('online',()=>{let c=JSON.parse(localStorage.getItem('data'));[...document.querySelectorAll('.reviews_offline')].forEach(d=>{d.classList.remove('reviews_offline'),d.querySelector('.offline_label').remove()}),null!==c&&('addReview'===a.name&&DBHelper.addReview(a.data),localStorage.removeItem('data'))})}}